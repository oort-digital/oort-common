{"version":3,"file":"index.umd.js","sources":["../src/serializers.ts","../src/searchParams.ts"],"sourcesContent":["import { NumOrUndef, NumRange } from \"./typesAndInterfaces\"\n\nexport interface ISerializer<T> {\n    key: string\n    serialize: (paramVal: T) => string[]\n    deserialize: (paramStr: string[]) => T\n}\n\nexport class StringSerializer implements ISerializer<string> {\n\n    readonly key: string\n    serialize = (paramVal: string) => [paramVal]\n    deserialize = (params: string[]) => params[0]\n\n    constructor(key: string) {\n        this.key = key\n    }\n}\n\nexport class BoolSerializer implements ISerializer<boolean> {\n\n    readonly key: string\n    serialize = (paramVal: boolean) => [`${paramVal}`]\n    deserialize = (params: string[]) => params[0] === 'true'\n\n    constructor(key: string) {\n        this.key = key\n    }\n}\n\nexport class IntSerializer implements ISerializer<number> {\n\n    readonly key: string\n    serialize = (paramVal: number) => [paramVal.toString()]\n    deserialize = (params: string[]) => parseInt(params[0])\n\n    constructor(key: string) {\n        this.key = key\n    }\n}\n\nexport class NumRangeSerializer implements ISerializer<NumRange> {\n\n    private static sep = '-'\n\n    readonly key: string\n\n    serialize = (paramVal: NumRange) => {\n        let result = ''\n        if(NumRangeSerializer.isDefined(paramVal[0])) {\n            result = paramVal[0]!.toString()\n        }\n        \n        if(NumRangeSerializer.isDefined(paramVal[1])) {\n            result = `${result}${NumRangeSerializer.sep}${paramVal[1]!.toString()}`\n        }\n        return [result]\n    }\n\n    deserialize = (params: string[]): NumRange => {\n        const arr = params[0].split(NumRangeSerializer.sep)\n        if(arr.length === 1) {\n            return [NumRangeSerializer.deserializeItem(arr[0]), undefined]\n        }\n        return [NumRangeSerializer.deserializeItem(arr[0]), NumRangeSerializer.deserializeItem(arr[1])]\n    }\n    \n    constructor(key: string) {\n        this.key = key\n    }\n\n    private static deserializeItem(str: string | undefined): NumOrUndef {\n        if(str) {\n            return parseFloat(str)\n        }\n        return undefined\n    }\n\n    private static isDefined(val: NumOrUndef): boolean {\n        //null value happens too\n        return val !== undefined && val !== null\n    }\n}\n\nexport class ArraySerializer<T> implements ISerializer<T[]> {\n\n    readonly key: string\n\n    constructor(key: string, parseFunc: (str: string) => T) {\n        this.key = key\n        this._parseFunc = parseFunc\n    }\n\n    serialize(arr: T[]): string[] {\n        const p =  arr.join(this._sep)\n        return [p]\n    }\n\n    deserialize(params: string[]): T[] {\n        return params[0].split(this._sep).map(x => this._parseFunc(x))\n    }\n\n    private readonly _sep = '-'\n    private readonly _parseFunc: (str: string) => T\n}","import { ArraySerializer, BoolSerializer, IntSerializer, ISerializer, NumRangeSerializer } from \"./serializers\";\nimport { NumRange, URLSearchParamsSetter } from \"./typesAndInterfaces\";\n\nexport abstract class BaseSearchParam<T> {\n\n    get param() { return this._param }\n\n    get isEmpty() { return this.isParamEmpty(this._param) }\n\n    protected isParamEmpty(paramVal: T) {\n        if(Array.isArray(paramVal)) {\n            return paramVal.length === 0\n        }\n        return !paramVal\n    }\n\n    clear() {\n        this._param = this._def\n        this._searchParams.delete(this._serializer.key)\n        this._setter(this._searchParams)\n    }\n\n    setParam(paramVal: T) {\n        this._param = paramVal\n        this._searchParams.delete(this._serializer.key)\n\n        if(!this.isParamEmpty(paramVal)) {\n            const params = this._serializer.serialize(paramVal)\n            params.forEach(p => this._searchParams.append(this._serializer.key, p))\n        }\n\n        this._setter(this._searchParams)\n    }\n    \n    constructor(searchParams: URLSearchParams, setter: URLSearchParamsSetter, serializer: ISerializer<T>, def: T) {\n        this._searchParams = searchParams\n        this._setter = setter\n        this._serializer = serializer\n        const params = searchParams.getAll(serializer.key)\n        this._def = def\n        this._param = params.length ? serializer.deserialize(params) : def\n    }\n\n    private readonly _def\n    private readonly _searchParams: URLSearchParams\n    private readonly _setter: URLSearchParamsSetter\n    private readonly _serializer: ISerializer<T>\n    private _param: T\n}\n\nconst isNumRangeNotEmpty = (range: NumRange) => range[0] !== undefined || range[1] !== undefined\n\nexport class NumRangeSearchParam extends BaseSearchParam<NumRange> {\n    protected isParamEmpty = (paramVal: NumRange) => !isNumRangeNotEmpty(paramVal)\n\n    constructor(key: string, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new NumRangeSerializer(key), [undefined, undefined])\n    }\n}\n\nexport class IntArrSearchParam extends BaseSearchParam<number[]> {\n    constructor(key: string, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new ArraySerializer<number>(key, parseInt), [])\n    }\n}\n\nexport class StrArrSearchParam extends BaseSearchParam<string[]> {\n    constructor(key: string, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new ArraySerializer<string>(key, x => x), [])\n    }\n}\n\nexport class IntSearchParam extends BaseSearchParam<number> {\n    constructor(key: string, defaultValue: number, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new IntSerializer(key), defaultValue)\n    }\n}\n\nexport class BoolSearchParam extends BaseSearchParam<boolean> {\n    constructor(key: string, defaultValue: boolean, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new BoolSerializer(key), defaultValue)\n    }\n}"],"names":["h","n","c","m"],"mappings":"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"}