{"version":3,"file":"index.cjs.js","sources":["../src/serializers.ts","../src/searchParams.ts"],"sourcesContent":["import { NumOrUndef, NumRange } from \"./typesAndInterfaces\"\n\nexport interface ISerializer<T> {\n    key: string\n    serialize: (paramVal: T) => string[]\n    deserialize: (paramStr: string[]) => T\n}\n\nexport class StringSerializer implements ISerializer<string> {\n\n    readonly key: string\n    serialize = (paramVal: string) => [paramVal]\n    deserialize = (params: string[]) => params[0]\n\n    constructor(key: string) {\n        this.key = key\n    }\n}\n\nexport class BoolSerializer implements ISerializer<boolean> {\n\n    readonly key: string\n    serialize = (paramVal: boolean) => [`${paramVal}`]\n    deserialize = (params: string[]) => params[0] === 'true'\n\n    constructor(key: string) {\n        this.key = key\n    }\n}\n\nexport class IntSerializer implements ISerializer<number> {\n\n    readonly key: string\n    serialize = (paramVal: number) => [paramVal.toString()]\n    deserialize = (params: string[]) => parseInt(params[0])\n\n    constructor(key: string) {\n        this.key = key\n    }\n}\n\nexport class NumRangeSerializer implements ISerializer<NumRange> {\n\n    private static sep = '-'\n\n    readonly key: string\n\n    serialize = (paramVal: NumRange) => {\n        let result = ''\n        if(NumRangeSerializer.isDefined(paramVal[0])) {\n            result = paramVal[0]!.toString()\n        }\n        \n        if(NumRangeSerializer.isDefined(paramVal[1])) {\n            result = `${result}${NumRangeSerializer.sep}${paramVal[1]!.toString()}`\n        }\n        return [result]\n    }\n\n    deserialize = (params: string[]): NumRange => {\n        const arr = params[0].split(NumRangeSerializer.sep)\n        if(arr.length === 1) {\n            return [NumRangeSerializer.deserializeItem(arr[0]), undefined]\n        }\n        return [NumRangeSerializer.deserializeItem(arr[0]), NumRangeSerializer.deserializeItem(arr[1])]\n    }\n    \n    constructor(key: string) {\n        this.key = key\n    }\n\n    private static deserializeItem(str: string | undefined): NumOrUndef {\n        if(str) {\n            return parseFloat(str)\n        }\n        return undefined\n    }\n\n    private static isDefined(val: NumOrUndef): boolean {\n        //null value happens too\n        return val !== undefined && val !== null\n    }\n}\n\nexport class ArraySerializer<T> implements ISerializer<T[]> {\n\n    readonly key: string\n\n    constructor(key: string, parseFunc: (str: string) => T) {\n        this.key = key\n        this._parseFunc = parseFunc\n    }\n\n    serialize(arr: T[]): string[] {\n        const p =  arr.join(this._sep)\n        return [p]\n    }\n\n    deserialize(params: string[]): T[] {\n        return params[0].split(this._sep).map(x => this._parseFunc(x))\n    }\n\n    private readonly _sep = '-'\n    private readonly _parseFunc: (str: string) => T\n}","import { ArraySerializer, BoolSerializer, IntSerializer, ISerializer, NumRangeSerializer } from \"./serializers\";\nimport { NumRange, URLSearchParamsSetter } from \"./typesAndInterfaces\";\n\nexport abstract class BaseSearchParam<T> {\n\n    get param() { return this._param }\n\n    get isEmpty() { return this.isParamEmpty(this._param) }\n\n    protected isParamEmpty(paramVal: T) {\n        if(Array.isArray(paramVal)) {\n            return paramVal.length === 0\n        }\n        return !paramVal\n    }\n\n    clear() {\n        this._param = this._def\n        this._searchParams.delete(this._serializer.key)\n        this._setter(this._searchParams)\n    }\n\n    setParam(paramVal: T) {\n        this._param = paramVal\n        this._searchParams.delete(this._serializer.key)\n\n        if(!this.isParamEmpty(paramVal)) {\n            const params = this._serializer.serialize(paramVal)\n            params.forEach(p => this._searchParams.append(this._serializer.key, p))\n        }\n\n        this._setter(this._searchParams)\n    }\n    \n    constructor(searchParams: URLSearchParams, setter: URLSearchParamsSetter, serializer: ISerializer<T>, def: T) {\n        this._searchParams = searchParams\n        this._setter = setter\n        this._serializer = serializer\n        const params = searchParams.getAll(serializer.key)\n        this._def = def\n        this._param = params.length ? serializer.deserialize(params) : def\n    }\n\n    private readonly _def\n    private readonly _searchParams: URLSearchParams\n    private readonly _setter: URLSearchParamsSetter\n    private readonly _serializer: ISerializer<T>\n    private _param: T\n}\n\nconst isNumRangeNotEmpty = (range: NumRange) => range[0] !== undefined || range[1] !== undefined\n\nexport class NumRangeSearchParam extends BaseSearchParam<NumRange> {\n    protected isParamEmpty = (paramVal: NumRange) => !isNumRangeNotEmpty(paramVal)\n\n    constructor(key: string, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new NumRangeSerializer(key), [undefined, undefined])\n    }\n}\n\nexport class IntArrSearchParam extends BaseSearchParam<number[]> {\n    constructor(key: string, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new ArraySerializer<number>(key, parseInt), [])\n    }\n}\n\nexport class StrArrSearchParam extends BaseSearchParam<string[]> {\n    constructor(key: string, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new ArraySerializer<string>(key, x => x), [])\n    }\n}\n\nexport class IntSearchParam extends BaseSearchParam<number> {\n    constructor(key: string, defaultValue: number, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new IntSerializer(key), defaultValue)\n    }\n}\n\nexport class BoolSearchParam extends BaseSearchParam<boolean> {\n    constructor(key: string, defaultValue: boolean, searchParams: URLSearchParams, setter: URLSearchParamsSetter) {\n        super(searchParams, setter, new BoolSerializer(key), defaultValue)\n    }\n}"],"names":["key","paramVal","params","_NumRangeSerializer","result","arr","str","val","parseFunc","x","p","searchParams","setter","serializer","def","isNumRangeNotEmpty","range","NumRangeSerializer","ArraySerializer","defaultValue","IntSerializer","BoolSerializer"],"mappings":"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"}