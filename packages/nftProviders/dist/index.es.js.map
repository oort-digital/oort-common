{"version":3,"file":"index.es.js","sources":["../src/typesAndInterfaces.ts","../src/moralis/moralisNftProvider.ts"],"sourcesContent":["export enum NftType {\r\n    ERC721 = \"ERC721\",\r\n    ERC1155 = \"ERC1155\"\r\n}\r\n\r\nexport enum ProviderKind {\r\n    Opensea = \"opensea\",\r\n    OpenseaV2 = \"openseaV2\",\r\n    Moralis = \"moralis\",\r\n    MoralisOpensea = \"MoralisOpensea\"\r\n}\r\n\r\nexport interface INft {\r\n    tokenAddress: string\r\n    tokenId: string\r\n    projectName: string | undefined\r\n    image: string | undefined\r\n    imageProvider: ProviderKind\r\n    contractType: NftType\r\n    amount: number\r\n    description: string | undefined\r\n    nftName: string | undefined\r\n    symbol: string\r\n    rawData: any\r\n}\r\n\r\nexport interface IFeatchNftsResponse {\r\n    total: number\r\n    page: number\r\n    pageSize: number\r\n    cursor: string | undefined\r\n    data: INft[]\r\n}\r\n\r\nexport interface IFeatchAccountNftsParams {\r\n    ownerAddress: string\r\n    limit: number\r\n    cursor: string | undefined\r\n    tokenAddresses?: string[]\r\n}\r\n\r\nexport interface IFeatchNftParams {\r\n    address: string\r\n    tokenId: string\r\n}\r\n\r\nexport interface IFeatchNftImageSrc {\r\n    address: string\r\n    tokenId: string\r\n    preferProvider: ProviderKind\r\n}\r\n\r\nexport interface IAssetsProvider {\r\n    chainId: number\r\n    providerKind: ProviderKind\r\n    featchAccountNfts: (params: IFeatchAccountNftsParams) => Promise<IFeatchNftsResponse>\r\n    featchNftImageSrc: (params: IFeatchNftImageSrc) => Promise<string | undefined>\r\n}\r\n\r\nexport interface IAssetProvider {\r\n    chainId: number\r\n    featchNft: (params: IFeatchNftParams) => Promise<INft>\r\n}\r\n\r\nexport interface IFeatchNftOwnerResponse {\r\n    asset?: {\r\n        address: string\r\n        tokenId: string\r\n        ownerAddress: string\r\n    }\r\n}\r\n\r\nexport interface INftOwnerProvider {\r\n    featchNftOwner(params: { address: string, tokenId: string }): Promise<IFeatchNftOwnerResponse>\r\n    chainId: number\r\n}\r\n\r\nexport interface IAssetsProviderFactory {\r\n    getOrCreate(chainId: number | undefined): IAssetsProvider | undefined \r\n}\r\n\r\nexport interface IAssetProviderFactory {\r\n    getOrCreate(chainId: number | undefined): IAssetProvider | undefined \r\n}\r\n\r\n// export interface INftOwnerProviderFactory {\r\n//     getOrCreate(chainId: number | undefined): INftOwnerProvider | undefined \r\n// }","import Moralis  from \"moralis\";\r\n// import { EvmChain } from '@moralisweb3/common-evm-utils';\r\nimport { MoralisDataObjectValue } from '@moralisweb3/common-core';\r\nimport { INftOwnerProvider, IFeatchNftOwnerResponse, ProviderKind, IFeatchAccountNftsParams, IFeatchNftImageSrc, IFeatchNftParams, IFeatchNftsResponse, INft, NftType, IAssetsProvider, IAssetProvider } from \"../typesAndInterfaces\";\r\nimport { ILogger } from \"@oort/logger\";\r\n\r\ninterface IMoralisMetadata {\r\n    image?: string\r\n    // image_data?: string\r\n    name?: string\r\n    description?: string\r\n}\r\n\r\ninterface IMoralisNft {\r\n    name?: string\r\n    amount?: number\r\n    tokenAddress: string\r\n    tokenId: string | number\r\n    symbol?: string\r\n    contractType?: string\r\n}\r\n\r\ninterface IRawNft {\r\n    name: string\r\n    token_address: string\r\n    token_id: string\r\n    contract_type: string\r\n    amount?: string\r\n    symbol: string\r\n}\r\n\r\nfunction toMoralisMetadata(rawMetadata: MoralisDataObjectValue | undefined): IMoralisMetadata | undefined {\r\n    if(rawMetadata) {\r\n        return {\r\n            name: rawMetadata[\"name\"],\r\n            description: rawMetadata['description'],\r\n            image: rawMetadata['image']\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction toMoralisNft({symbol, amount, name, token_address, token_id, contract_type }: IRawNft): IMoralisNft {\r\n\r\n    return {\r\n        name,\r\n        tokenAddress: token_address,\r\n        tokenId: token_id,\r\n        contractType: contract_type,\r\n        amount: amount ? parseInt(amount) : 0,\r\n        symbol\r\n    }\r\n}\r\n\r\ntype MoralisLogLevel = 'verbose' | 'debug' | 'info' | 'warning' | 'error' | 'off'\r\n\r\nexport class MoralisNftProvider implements IAssetsProvider, IAssetProvider, INftOwnerProvider {\r\n    public readonly providerKind: ProviderKind = ProviderKind.Moralis\r\n\r\n    public readonly chainId: number;\r\n\r\n    public async featchNftOwner(params: { address: string, tokenId: string }): Promise<IFeatchNftOwnerResponse> {\r\n        await this._startPromise\r\n        const { address, tokenId } = params\r\n        const response = await Moralis.EvmApi.nft.getNFTTokenIdOwners({\r\n            chain: this.chainId,\r\n            address: address,\r\n            tokenId: tokenId,\r\n        })\r\n        if(!response.result?.length) {\r\n            return { asset: undefined }\r\n        }\r\n\r\n        const sorted = response.result.sort((a, b) => {\r\n            const aBN = a.result.blockNumber!\r\n            const bBN = b.result.blockNumber!\r\n\r\n            if (aBN < bBN) {\r\n                return -1;\r\n              }\r\n              if (aBN > bBN) {\r\n                return 1;\r\n              }\r\n\r\n              return 0;\r\n        })\r\n\r\n        const nft = sorted[0].toJSON()\r\n        return {\r\n            asset: {\r\n                address: nft.tokenAddress,\r\n                tokenId: nft.tokenId.toString(),\r\n                ownerAddress: nft.ownerOf!\r\n            }\r\n        }\r\n    }\r\n\r\n    public async featchNft(params: IFeatchNftParams): Promise<INft> {\r\n        await this._startPromise\r\n        const { address, tokenId } = params\r\n        const response = await Moralis.EvmApi.nft.getNFTMetadata({\r\n            chain: this.chainId,\r\n            address: address,\r\n            tokenId: tokenId\r\n        })\r\n\r\n        const rawNft = response!.raw\r\n        const moralisNft = toMoralisNft(rawNft)\r\n        return this.mapNft(moralisNft, rawNft.normalized_metadata)\r\n    }\r\n\r\n    public async featchNftImageSrc(params: IFeatchNftImageSrc): Promise<string | undefined> {\r\n        await this._startPromise\r\n        const moralisNft = await this.featchNft(params)\r\n        return moralisNft.image\r\n    }\r\n\r\n    public async featchAccountNfts(params: IFeatchAccountNftsParams): Promise<IFeatchNftsResponse> {\r\n        await this._startPromise\r\n\r\n        const moralisResponse = await Moralis.EvmApi.nft.getWalletNFTs({\r\n            chain: this.chainId,\r\n            address: params.ownerAddress,\r\n            tokenAddresses: params.tokenAddresses,\r\n            limit: params.limit,\r\n            //cursor: params.cursor\r\n        })\r\n        const { pagination, result } = moralisResponse\r\n\r\n        const data = result.map(x => this.mapNft(x.toJSON(), toMoralisMetadata(x.metadata)))\r\n        \r\n        return {\r\n            page: pagination.page,\r\n            pageSize: pagination.pageSize,\r\n            total: pagination.total,\r\n            data,\r\n            cursor: pagination.cursor\r\n        }\r\n        \r\n    }\r\n\r\n    constructor(logger: ILogger, chainId: number, config: { apiKey: string }, logLevel: MoralisLogLevel = 'info') {\r\n        this._startPromise = Moralis.start({\r\n            apiKey: config.apiKey,\r\n            formatEvmAddress: 'checksum',\r\n            formatEvmChainId: 'decimal',\r\n            logLevel: logLevel\r\n        })\r\n        this.chainId = chainId\r\n        this._logger = logger\r\n    }\r\n\r\n    private readonly _logger: ILogger\r\n    private readonly _startPromise: Promise<void>\r\n    private ParseImage(tokenAddress: string, tokenId: string, metadata: IMoralisMetadata): string | undefined {\r\n        if(metadata.image !== undefined) { return metadata.image }\r\n        //if(metadata.image_data !== undefined) { return metadata.image_data }\r\n        this._logger.trace(`No image. TokenAddress: ${tokenAddress} TokenId: ${tokenId} Metadata: ${metadata}`)\r\n        return undefined\r\n    }\r\n\r\n    private ParseNftName(tokenAddress: string, tokenId: string, metadata: IMoralisMetadata): string | undefined {\r\n        if(metadata.name !== undefined) { return metadata.name }\r\n        this._logger.trace(`No nftName. TokenAddress: ${tokenAddress} TokenId: ${tokenId} Metadata: ${metadata}`)\r\n        return undefined\r\n    }\r\n\r\n    private ParseDescription(tokenAddress: string, tokenId: string, metadata: IMoralisMetadata): string | undefined {\r\n        if(metadata.description !== undefined) { return metadata.description }\r\n        this._logger.trace(`No description. TokenAddress: ${tokenAddress} TokenId: ${tokenId} Metadata: ${metadata}`)\r\n        return undefined\r\n    }\r\n\r\n    private static ParseContractType(tokenAddress: string, tokenId: string, rawNftType: string): NftType {\r\n        if(rawNftType === \"ERC721\") { return NftType.ERC721 }\r\n        if(rawNftType === \"ERC1155\") { return NftType.ERC1155 }\r\n        throw new Error(`Unknow contarct type: ${rawNftType}. TokenAddress: ${tokenAddress} TokenId: ${tokenId}`)\r\n    }\r\n\r\n    private mapNft(rawNft: IMoralisNft, metadata: IMoralisMetadata | undefined): INft {\r\n        const tokenId = rawNft.tokenId.toString()\r\n        const result: INft = {\r\n            projectName: rawNft.name,\r\n            amount:  rawNft.amount || 0,\r\n            contractType: MoralisNftProvider.ParseContractType(rawNft.tokenAddress, tokenId, rawNft.contractType!),\r\n            tokenAddress: rawNft.tokenAddress,\r\n            tokenId: tokenId,\r\n            symbol: rawNft.symbol || '',\r\n            rawData: rawNft,\r\n            image: undefined,\r\n            imageProvider: ProviderKind.Moralis,\r\n            nftName: undefined,\r\n            description: undefined\r\n        }\r\n\r\n        if(metadata) {\r\n            result.image = this.ParseImage(rawNft.tokenAddress, tokenId, metadata)\r\n            result.nftName = this.ParseNftName(rawNft.tokenAddress, tokenId, metadata)\r\n            result.description = this.ParseDescription(rawNft.tokenAddress, tokenId, metadata)\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n}\r\n"],"names":["m","g"],"mappings":"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"}