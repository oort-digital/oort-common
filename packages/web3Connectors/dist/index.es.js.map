{"version":3,"file":"index.es.js","sources":["../src/connectorProvider.ts","../src/baseConnector.ts","../src/connectorNames.ts","../src/injectedConnector.ts","../src/walletConnectConnector.ts"],"sourcesContent":["import { ILogger } from \"@oort/logger\";\r\nimport { ConnectorNames } from \"./connectorNames\";\r\nimport { IConnector } from \"./iConnector\";\r\n\r\nconst lsKey = 'cur_connector';\r\n\r\nconst getCurConnectorName = () : ConnectorNames | undefined => {\r\n    const curCnnNameStr = localStorage.getItem(lsKey);\r\n    return curCnnNameStr ? curCnnNameStr as ConnectorNames : undefined;\r\n}\r\n\r\nconst setCurConnectorName = (connectorName: ConnectorNames) => localStorage.setItem(lsKey, connectorName);\r\nconst removeCurConnectorName = () => localStorage.removeItem(lsKey);\r\n\r\n\r\nexport class ConnectorProvider\r\n{\r\n    private readonly _logger: ILogger\r\n    public readonly connectorsByName: { [name: string]: IConnector } = {}\r\n    private _curConnector: IConnector | undefined\r\n    public readonly WaitInitialisationAsync : Promise<void>\r\n\r\n    private async InitAsync(connectors: IConnector[], curConnectorName?: ConnectorNames): Promise<void> {\r\n        let curConnector: IConnector | undefined = undefined\r\n        for(let i = 0; i < connectors.length; i++) {\r\n            const c = connectors[i]\r\n            this.connectorsByName[c.name] = c\r\n            if(c.name === curConnectorName) {\r\n                if(await c.isConnected) {\r\n                    curConnector = c\r\n                }\r\n            }\r\n        }\r\n\r\n        if(curConnector) {\r\n            if(await curConnector.enable()) {\r\n                this._curConnector = curConnector\r\n                this._logger.debug(`Current connector is ${this._curConnector.name}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(logger: ILogger, connectors: IConnector[]) {\r\n        this._logger = logger\r\n        this.WaitInitialisationAsync = this.InitAsync(connectors, getCurConnectorName());\r\n    }\r\n\r\n    public get CurConnector(): IConnector | undefined {\r\n        return this._curConnector;\r\n    }\r\n\r\n    async EnableAsync(connectorName: ConnectorNames): Promise<any> {\r\n        await this.WaitInitialisationAsync\r\n        const curConnector = this.connectorsByName[connectorName]\r\n        if(await curConnector.enable()) {\r\n            setCurConnectorName(connectorName)\r\n            this._curConnector = curConnector\r\n        }\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        await this._curConnector?.disconnect()\r\n        removeCurConnectorName()\r\n        this._curConnector = undefined\r\n    }\r\n}","import { providers, Signer } from \"ethers\";\r\nimport { ILogger } from \"@oort/logger\";\r\nimport { ConnectorNames } from \"./connectorNames\";\r\n\r\ntype AccountChangedHandlerType = (accounts: Array<string>) => void\r\ntype ChainChangedHandlerType = (chainId: string) => void\r\ntype DisconnectHandlerType = (error: any) => void\r\n\r\nexport interface IChainInfo {\r\n    name: string\r\n    chainId: number\r\n    rpcUrl: string\r\n    blockExplorer: string\r\n    nativeCurrency?: {\r\n        name: string\r\n        symbol: string\r\n        decimals: number\r\n    }\r\n}\r\nexport interface IChainMap {\r\n    [chainId: number]: IChainInfo\r\n  }\r\n\r\nexport abstract class BaseConnector {\r\n    name: ConnectorNames;\r\n\r\n    protected readonly _chains: IChainMap = {}\r\n\r\n    private _externalAccountChangedHandlers: AccountChangedHandlerType[] = []\r\n    private accountsChangedHandler?: AccountChangedHandlerType\r\n\r\n    private _externalChainChangedHandlers: ChainChangedHandlerType[] = []\r\n    private chainChangedHandler?: ChainChangedHandlerType\r\n\r\n    private _externalDisconnectHandlers: DisconnectHandlerType[] = []\r\n    protected disconnectHandler?: DisconnectHandlerType\r\n\r\n    protected readonly logger: ILogger\r\n\r\n    private readonly _checkConnectionDelayMs : number = 500;\r\n    private _timerId?: NodeJS.Timeout;\r\n    \r\n    private async CheckConnection(): Promise<void> {\r\n        if(!await this.isConnected)\r\n        {\r\n            if(this._timerId) {\r\n                clearInterval(this._timerId)\r\n                this.logger.debug(`${this.name}Connector. CheckConnection stopped`)\r\n            }\r\n\r\n            this._externalDisconnectHandlers.forEach(h => h(undefined));\r\n            this._externalDisconnectHandlers = [];\r\n        }\r\n    }\r\n\r\n    constructor(logger: ILogger, name: ConnectorNames, chains: IChainInfo[]) {\r\n        this.name = name\r\n        this.logger = logger\r\n        chains.forEach(x => this._chains[x.chainId] = x)\r\n    }\r\n\r\n    protected initListeners(rawProvider: any) {\r\n\r\n        this.logger.debug('initListeners')\r\n        const that = this\r\n        this.accountsChangedHandler = (accounts: Array<string>) => {\r\n            this.logger.debug(`${this.name}.accountsChangedHandler`)\r\n            that._externalAccountChangedHandlers.forEach(h => h(accounts));\r\n        }\r\n\r\n        this.chainChangedHandler = (chainId: string) => {\r\n            this.logger.debug(`${this.name}.chainChangedHandler`)\r\n            that._externalChainChangedHandlers.forEach(h => h(chainId));\r\n        }\r\n\r\n        this.disconnectHandler = (error: any) => {\r\n            this.logger.debug(`${this.name}.disconnectHandler ${JSON.stringify(error)}`)\r\n            that._externalDisconnectHandlers.forEach(h => h(error));\r\n        }\r\n\r\n        rawProvider.on('accountsChanged', this.accountsChangedHandler);\r\n        rawProvider.on('chainChanged', this.chainChangedHandler);\r\n        // use custom connection check by timer. See onDisconnect\r\n        // rawProvider.on(\"disconnect\", this.disconnectHandler);\r\n    }\r\n\r\n    private removeListeners() {\r\n        this.rawProvider.removeListener('accountsChanged', this.accountsChangedHandler);\r\n        this.rawProvider.removeListener('chainChanged', this.chainChangedHandler);\r\n        // this.rawProvider.removeListener(\"disconnect\", this.disconnectHandler);\r\n        this._externalAccountChangedHandlers = []\r\n        this._externalChainChangedHandlers = []\r\n        this._externalDisconnectHandlers = []\r\n    }\r\n\r\n    protected abstract get rawProvider(): any;\r\n   \r\n    onAccountsChanged(handler: AccountChangedHandlerType) {\r\n        this._externalAccountChangedHandlers.push(handler)\r\n    }\r\n\r\n    onChainChanged(handler: ChainChangedHandlerType): void {\r\n        this._externalChainChangedHandlers.push(handler)\r\n    }\r\n\r\n    onDisconnect(handler: (error: any) => void): void {\r\n\r\n        if(!this._timerId) {\r\n            const self = this;\r\n            this._timerId = setInterval(() => self.CheckConnection(), this._checkConnectionDelayMs)\r\n        }\r\n        \r\n        this._externalDisconnectHandlers.push(handler);\r\n    }\r\n\r\n    abstract get isConnected(): Promise<boolean>\r\n\r\n    get signer(): Signer {\r\n        const provider = new providers.Web3Provider(this.rawProvider);\r\n        return provider.getSigner()\r\n    }\r\n\r\n    disconnect(): Promise<void> {\r\n        this.removeListeners()\r\n        return Promise.resolve()\r\n    }\r\n\r\n}","export enum ConnectorNames {\r\n    Undefined = '',\r\n    Injected = 'Injected',\r\n    WalletConnect = 'WalletConnect',\r\n}","import { ILogger } from \"@oort/logger\";\r\nimport { BaseConnector, IChainInfo } from \"./baseConnector\";\r\nimport { ConnectorNames } from \"./connectorNames\";\r\nimport { IConnector } from \"./iConnector\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        ethereum: any;\r\n    }\r\n}\r\n\r\nexport class InjectedConnector\r\n    extends BaseConnector\r\n    implements IConnector\r\n{\r\n  private _ethRequestAccounts: Promise<boolean> | undefined = undefined\r\n\r\n    constructor(logger: ILogger, chains: IChainInfo[]) {\r\n        super(logger, ConnectorNames.Injected, chains);\r\n        if(this.isInstalled) {\r\n          this.initListeners(window.ethereum)\r\n        }\r\n    }\r\n\r\n    get canSwitchChain() { return !!window.ethereum.isMetaMask }\r\n\r\n    async switchChain(chainId: number): Promise<void> {\r\n        const chainIdHex = `0x${chainId.toString(16)}`\r\n        try {\r\n\r\n            if(!this._chains[chainId]) {\r\n                throw new Error(`Chain ${chainId} not supported`)\r\n            }\r\n            await window.ethereum.request({\r\n              method: 'wallet_switchEthereumChain',\r\n              params: [{ chainId: chainIdHex }],\r\n            });\r\n          } catch (switchError: any) {\r\n            // This error code indicates that the chain has not been added to MetaMask.\r\n            if (switchError.code === 4902) {\r\n              try {\r\n                const chain = this._chains[chainId]\r\n                await window.ethereum.request({\r\n                  method: 'wallet_addEthereumChain',\r\n                  params: [{\r\n                    chainId: chainIdHex,\r\n                    chainName: chain.name,\r\n                    rpcUrls: [chain.rpcUrl],\r\n                    nativeCurrency: chain.nativeCurrency,\r\n                    blockExplorerUrls: [chain.blockExplorer]  }],\r\n                });\r\n              } catch (addError) {\r\n                throw addError\r\n              }\r\n            }\r\n            // handle other \"switch\" errors\r\n          }\r\n    }\r\n\r\n    private async prvEnable(): Promise<boolean> {\r\n      try {\r\n        await this.rawProvider.request({ method: 'eth_requestAccounts' })\r\n      }\r\n      catch(error: any) {\r\n        if (error.code === 4001) {\r\n          // EIP-1193 userRejectedRequest error\r\n          this.logger.warn('Please connect to MetaMask.');\r\n        } else {\r\n          this.logger.error(error);\r\n        }\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n\r\n    async enable(): Promise<boolean> {\r\n        if(this._ethRequestAccounts) {\r\n          this.logger.debug('InjectedConnector.enable already called')\r\n          return await this._ethRequestAccounts\r\n        }\r\n\r\n        this.logger.debug('InjectedConnector.enable')\r\n        this._ethRequestAccounts = this.prvEnable()\r\n        const result = await this._ethRequestAccounts\r\n        this._ethRequestAccounts = undefined\r\n        return result;\r\n    }\r\n\r\n    private async isConnectedAsync(): Promise<boolean> {\r\n      const response: string[] = await window.ethereum.request({ method: 'eth_accounts' })\r\n      return response.length > 0\r\n    }\r\n\r\n    get isConnected(): Promise<boolean> {\r\n      return this.isConnectedAsync()\r\n    }\r\n\r\n    get isInstalled(): boolean {\r\n      return !!window.ethereum\r\n    }\r\n\r\n    get installUrl(): string {\r\n      return 'https://metamask.io/download'\r\n    }\r\n\r\n    protected get rawProvider(): any {\r\n        return window.ethereum\r\n    }\r\n}\r\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { IRPCMap } from \"@walletconnect/types\";\r\nimport { ILogger } from \"@oort/logger\";\r\nimport { BaseConnector, IChainInfo } from \"./baseConnector\";\r\nimport { ConnectorNames } from \"./connectorNames\";\r\nimport { IConnector } from \"./iConnector\";\r\n\r\nexport class WalletConnectConnector extends BaseConnector implements IConnector {\r\n\r\n    private _walletConnect: WalletConnectProvider\r\n    private readonly _rpc: IRPCMap\r\n\r\n    constructor(logger: ILogger, chains: IChainInfo[]) {\r\n        super(logger, ConnectorNames.WalletConnect, chains)\r\n        this._rpc = {}\r\n        chains.forEach(x => this._rpc[x.chainId] = x.rpcUrl)\r\n        this._walletConnect = new WalletConnectProvider({ rpc: this._rpc })\r\n        this.initListeners(this._walletConnect)\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        await super.disconnect()\r\n        await this._walletConnect.disconnect()\r\n    }\r\n    \r\n    get canSwitchChain() { return false }\r\n\r\n    // @ts-ignore\r\n    switchChain(chainId: number): Promise<void> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    protected get rawProvider(): any {\r\n        return this._walletConnect;\r\n    }\r\n\r\n    get isConnected(): Promise<boolean> {\r\n        const lsItem = localStorage.getItem('walletconnect');\r\n        const result = (!!lsItem) && this._walletConnect.isWalletConnect\r\n        return Promise.resolve(result)\r\n        //return this._walletConnect.connected\r\n    }\r\n\r\n    get isInstalled(): boolean {\r\n        return true\r\n    }\r\n\r\n    get installUrl(): string {\r\n        return ''\r\n    }\r\n\r\n    async enable(): Promise<any> {\r\n        try {\r\n            return await this._walletConnect.enable();\r\n        }\r\n        catch(error)\r\n        {\r\n            this._walletConnect = new WalletConnectProvider({ rpc: this._rpc });\r\n            return Promise.reject<any>(error);\r\n        }\r\n    }\r\n}"],"names":["lsKey","getCurConnectorName","curCnnNameStr","setCurConnectorName","connectorName","removeCurConnectorName","logger","connectors","curConnectorName","curConnector","i","c","_a","name","chains","x","h","rawProvider","that","accounts","chainId","error","handler","self","providers","ConnectorNames","BaseConnector","chainIdHex","switchError","chain","addError","result","WalletConnectProvider"],"mappings":"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"}